---
// @ts-nocheck
---

<canvas id="canvas">Your browser doesn't support canvas</canvas>

<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
    <defs>
      <filter id="shadowed-goo">
          <feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="10" />
          <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />
          <feGaussianBlur in="goo" stdDeviation="3" result="shadow" />
          <feColorMatrix in="shadow" mode="matrix" values="0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 1 -0.2" result="shadow" />
          <feOffset in="shadow" dx="1" dy="1" result="shadow" />
          <feBlend in2="shadow" in="goo" result="goo" />
          <feBlend in2="goo" in="SourceGraphic" result="mix" />
      </filter>
      <filter id="goo">
          <feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="10" />
          <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />
          <feBlend in2="goo" in="SourceGraphic" result="mix" />
      </filter>
    </defs>
</svg>

<script>
const TWO_PI = Math.PI * 2;

class Application {
    constructor() {
        this.canvas = document.getElementById("canvas");
        this.context = this.canvas.getContext("2d");
        this.width = this.canvas.width = window.innerWidth;
        this.height = this.canvas.height = window.innerHeight;
        this.center = {
            x: this.width / 2,
            y: this.height / 2
        };

        this.circleContainers = [];
        this.backgroundImage = new Image();
        this.backgroundImage.src = '/img/background.jpg'; // AsegÃºrate de tener esta imagen en public/images/

        window.addEventListener('resize', () => this.resizeCanvas(), false);
    }

    resizeCanvas() {
        this.width = this.canvas.width = window.innerWidth;
        this.height = this.canvas.height = window.innerHeight;
        this.center = {
            x: this.width / 2,
            y: this.height / 2
        };

        this.circleContainers = [];
        this.initializeCircleContainers();
    }

    initializeCircleContainers() {
        for (let x = 0; x < this.width + 50; x += 50) {
            for (let y = 0; y < this.height + 50; y += 50) {
                let circleContainer = new CircleContainer(this.context, x, y);
                circleContainer.initializeCircles();
                this.circleContainers.push(circleContainer);
            }
        }
    }

    update() {
        for (let i = 0; i < this.circleContainers.length; i++) {
            this.circleContainers[i].update();
        }
    }

    render() {
        this.context.clearRect(0, 0, this.width, this.height);
        
        // Dibujar la imagen de fondo
        this.context.drawImage(this.backgroundImage, 0, 0, this.width, this.height);
        
        // Aplicar un overlay semi-transparente
        this.context.fillStyle = 'rgba(9, 32, 23, 0.1)';
        this.context.fillRect(0, 0, this.width, this.height);
        
        for (let i = 0; i < this.circleContainers.length; i++) {
            this.circleContainers[i].render();
        }
    }

    loop() {
        this.update();
        this.render();
        window.requestAnimationFrame(() => this.loop());
    }
}

class CircleContainer {
    constructor(context, x, y) {
        this.context = context;
        this.position = {x, y};
        this.numberOfCircles = 25;
        this.circles = [];
        this.baseRadius = 15;
        this.bounceRadius = 100;
        this.singleSlice = TWO_PI / this.numberOfCircles;
    }

    initializeCircles() {
        for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles.push(new Circle(this.position.x, this.position.y + Math.random(), this.baseRadius, this.bounceRadius, i * this.singleSlice));
        }
    }

    update() {
        for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles[i].update(this.context);
        }
    }

    render() {
        for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles[i].render(this.context);
        }
    }
}

class Circle {
    constructor(x, y, baseRadius, bounceRadius, angleCircle) {
        this.basePosition = {x, y};
        this.position = {x, y};
        this.speed = 0.015;
        this.baseSize = 8;
        this.size = 8;
        this.angle = (x + y);
        this.baseRadius = baseRadius;
        this.bounceRadius = bounceRadius;
        this.angleCircle = angleCircle;
    }

    update() {
        this.position.x = this.basePosition.x + Math.cos(this.angleCircle) * (Math.sin(this.angle + this.angleCircle) * this.bounceRadius + this.baseRadius);
        this.position.y = this.basePosition.y + Math.sin(this.angleCircle) * (Math.sin(this.angle + this.angleCircle) * this.bounceRadius + this.baseRadius);
        this.size = Math.cos(this.angle) * 8 + this.baseSize;
        this.angle += this.speed;
    }

    render(context) {
        context.fillStyle = "hsl(195, 100%, "+this.size * 4+"%)";
        context.beginPath();
        context.arc(this.position.x, this.position.y, this.size, 0, TWO_PI);
        context.fill();
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const application = new Application();
    application.initializeCircleContainers();
    application.loop();
});
</script>

<style>
  body {
    margin: 0;
    padding: 0;
  }

  #canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    filter: url('#shadowed-goo');
  }

  svg {
    display: none;
  }
</style> 